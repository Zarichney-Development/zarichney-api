// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using Zarichney.Client.Contracts;

#nullable enable annotations

namespace Zarichney.Client
{
    /// <summary>Provides a sample cookbook order submission structure.</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.5.5.0")]
    public partial interface ICookbookApi
    {
        /// <summary>Provides a sample cookbook order submission structure.</summary>
        /// <remarks>
        /// Useful for front-end development to understand the expected format for creating a cookbook order.
        /// Returns a predefined `CookbookOrderSubmission` object.
        /// Does not actually create an order.
        /// </remarks>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Post("/api/cookbook/sample")]
        Task<IApiResponse<CookbookOrderSubmission>> Sample(CancellationToken cancellationToken = default);

        /// <summary>Creates a new cookbook order based on user submission.</summary>
        /// <remarks>
        /// Receives the user's cookbook specifications, validates the email address,
        /// and initiates the order processing.
        /// The actual cookbook generation (finding recipes, compiling PDF) can be processed immediately or deferred
        /// based on the `processOrder` query parameter.
        /// </remarks>
        /// <param name="processOrder">If true (default), the order processing (e.g., recipe fetching, PDF generation) starts immediately (potentially in the background). If false, only the order record is created.</param>
        /// <param name="body">The details for the cookbook order, including email and recipe preferences.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>201</term>
        /// <description>Created</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Post("/api/cookbook")]
        Task<IApiResponse<CookbookOrder>> Cookbook([Query] bool? processOrder = default, [Body] CookbookOrderSubmission? body = default, CancellationToken cancellationToken = default);

        /// <summary>Retrieves the details of a specific cookbook order.</summary>
        /// <remarks>
        /// Fetches the `CookbookOrder` by its unique ID.
        /// Also attempts to establish or retrieve a session associated with this order, setting an `X-Session-Id` header in the response.
        /// </remarks>
        /// <param name="orderId">The unique identifier of the cookbook order.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Get("/api/cookbook/order/{orderId}")]
        Task<IApiResponse<CookbookOrder>> OrderGET(string orderId, CancellationToken cancellationToken = default);

        /// <summary>Triggers reprocessing for an existing cookbook order.</summary>
        /// <remarks>
        /// Re-queues the generation or processing steps for a given order ID.
        /// Useful if the initial processing failed or needs to be redone.
        /// The actual processing happens in a background task.
        /// The endpoint returns quickly after queuing the task.
        /// </remarks>
        /// <param name="orderId">The unique identifier of the cookbook order to reprocess.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Post("/api/cookbook/order/{orderId}")]
        Task<IApiResponse<CookbookOrder>> OrderPOST(string orderId, CancellationToken cancellationToken = default);

        /// <summary>Retrieves the generated cookbook PDF for a specific order.</summary>
        /// <remarks>
        /// Fetches the PDF file associated with the order.
        /// Optionally allows forcing a rebuild of the PDF before retrieval.
        /// Optionally allows emailing the PDF to the order's recipient after retrieval/rebuild.
        /// </remarks>
        /// <param name="orderId">The unique identifier of the cookbook order.</param>
        /// <param name="rebuild">If true, forces the PDF compilation process to run again before returning the file.</param>
        /// <param name="email">If true, sends the generated or retrieved PDF via email to the address associated with the order.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Get("/api/cookbook/order/{orderId}/pdf")]
        Task<IApiResponse<FileResponse>> Pdf(string orderId, [Query] bool? rebuild = default, [Query] bool? email = default, CancellationToken cancellationToken = default);

        /// <summary>Resends the cookbook PDF via email for a specific order.</summary>
        /// <remarks>
        /// Triggers the email service to send the cookbook PDF associated with the given order ID
        /// to the recipient email address stored in the order details. Assumes the PDF already exists.
        /// </remarks>
        /// <param name="orderId">The unique identifier of the cookbook order.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Post("/api/cookbook/order/{orderId}/email")]
        Task<IApiResponse<string>> Email(string orderId, CancellationToken cancellationToken = default);

        /// <summary>Searches for recipes based on a query string.</summary>
        /// <remarks>
        /// Queries the existing recipe database. Optionally, can trigger a web scrape if no suitable recipes are found locally.
        /// Allows specifying criteria like minimum score and desired number of recipes.
        /// </remarks>
        /// <param name="query">The search term for recipes (e.g., "chicken soup", "vegan chocolate cake").</param>
        /// <param name="scrape">If true, performs a web scrape if the initial database search yields insufficient results based on other parameters.</param>
        /// <param name="acceptableScore">Optional minimum score threshold for recipes to be considered acceptable.</param>
        /// <param name="requiredCount">Optional desired number of recipes to return.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Get("/api/recipe")]
        Task<IApiResponse<ICollection<Recipe>>> Recipe([Query] string? query = default, [Query] bool? scrape = default, [Query] int? acceptableScore = default, [Query] int? requiredCount = default, CancellationToken cancellationToken = default);

        /// <summary>Scrapes web sources for recipes based on a query.</summary>
        /// <remarks>
        /// Directly initiates a web scraping process to find recipes matching the query.
        /// Can optionally filter by a specific website, set score thresholds, and specify the number needed.
        /// Optionally stores the found and ranked recipes in the repository.
        /// </remarks>
        /// <param name="query">The search term for recipes.</param>
        /// <param name="site">Optional: Restrict scraping to a specific domain (e.g., "allrecipes.com").</param>
        /// <param name="acceptableScore">Optional minimum score threshold for scraped recipes.</param>
        /// <param name="recipesNeeded">Optional target number of recipes to find.</param>
        /// <param name="store">If true, ranks and stores the newly scraped recipes in the database asynchronously.</param>
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>OK</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>404</term>
        /// <description>Not Found</description>
        /// </item>
        /// <item>
        /// <term>500</term>
        /// <description>Internal Server Error</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json")]
        [Get("/api/recipe/scrape")]
        Task<IApiResponse<ICollection<Recipe>>> Scrape([Query] string? query = default, [Query] string? site = default, [Query] int? acceptableScore = default, [Query] int? recipesNeeded = default, [Query] bool? store = default, CancellationToken cancellationToken = default);
    }

}