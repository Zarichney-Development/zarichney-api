using Refit;
using System.Text.Json;

namespace Zarichney.Client;

/// <summary>
/// Extension methods for IZarichneyAPI to support integration tests.
/// These methods extend the auto-generated Refit client to include endpoints
/// that are used in tests but might not be in the generated file.
/// </summary>
public static class IZarichneyAPIExtensions
{
  /// <summary>
  /// Extension method to call the health endpoint.
  /// </summary>
  public static async Task<HealthResponse> Health(this IZarichneyAPI client)
  {
    return await client.GetHealth();
  }

  /// <summary>
  /// Extension method to get the service status.
  /// </summary>
  public static async Task<Dictionary<string, ServiceStatusInfo>> GetServiceStatus(this IZarichneyAPI client)
  {
    return await client.GetServiceStatusFromAPI();
  }

  /// <summary>
  /// Health response from the API.
  /// </summary>
  public class HealthResponse
  {
    public bool Success { get; set; }
    public DateTime Time { get; set; }
  }

  /// <summary>
  /// Base implementation for required methods.
  /// These would normally be auto-generated by Refit.
  /// </summary>
  [Get("/api/health")]
  public static Task<HealthResponse> GetHealth(this IZarichneyAPI client)
  {
    return Extensions.SendRequest<HealthResponse>(client, "/api/health", HttpMethod.Get);
  }

  /// <summary>
  /// Gets the service status from the API.
  /// </summary>
  [Get("/api/status")]
  public static Task<Dictionary<string, ServiceStatusInfo>> GetServiceStatusFromAPI(this IZarichneyAPI client)
  {
    return Extensions.SendRequest<Dictionary<string, ServiceStatusInfo>>(client, "/api/status", HttpMethod.Get);
  }

  /// <summary>
  /// Gets the configuration status from the API.
  /// </summary>
  [Get("/api/config")]
  public static Task<List<ConfigurationItemStatus>> Config(this IZarichneyAPI client)
  {
    return Extensions.SendRequest<List<ConfigurationItemStatus>>(client, "/api/status/config", HttpMethod.Get);
  }

  /// <summary>
  /// Helper class to avoid Refit dependency in extension methods.
  /// </summary>
  internal static class Extensions
  {
    internal static async Task<T> SendRequest<T>(IZarichneyAPI client, string path, HttpMethod method)
    {
      // Get the HttpClient from the Refit client
      var httpClient = client.GetType().GetField("_httpClient",
          System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?
          .GetValue(client) as HttpClient;

      if (httpClient == null)
      {
        throw new InvalidOperationException("Could not get HttpClient from Refit client");
      }

      // Send the request
      using var request = new HttpRequestMessage(method, path);
      var response = await httpClient.SendAsync(request);
      response.EnsureSuccessStatusCode();

      // Read the content as a string and deserialize it
      var content = await response.Content.ReadAsStringAsync();
      return JsonSerializer.Deserialize<T>(content, new JsonSerializerOptions
      {
        PropertyNameCaseInsensitive = true
      }) ?? throw new InvalidOperationException($"Failed to deserialize response to type {typeof(T).Name}");
    }
  }
}
