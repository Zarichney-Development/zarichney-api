name: 'Create Security Issues'
description: 'Creates GitHub issues for significant security findings'
author: 'Zarichney Development'

inputs:
  pr-number:
    description: 'Pull request number'
    required: true
  security-data-file:
    description: 'Path to security analysis data JSON file'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Create Security Issues
      shell: bash
      run: |
        echo "üö® Creating security issues for significant findings..."
        
        if [ ! -f "${{ inputs.security-data-file }}" ]; then
          echo "‚ùå Security data file not found: ${{ inputs.security-data-file }}"
          exit 0
        fi
        
        # Extract security metrics
        CRITICAL_VULNS=$(jq -r '.security_assessment.critical_vulnerabilities // 0' ${{ inputs.security-data-file }})
        HIGH_VULNS=$(jq -r '.security_assessment.high_vulnerabilities // 0' ${{ inputs.security-data-file }})
        SECRETS_COUNT=$(jq -r '.secrets_detection.secret_count // 0' ${{ inputs.security-data-file }})
        DEPENDENCY_VULNS=$(jq -r '.dependency_security.total_dependency_vulnerabilities // 0' ${{ inputs.security-data-file }})
        RISK_LEVEL=$(jq -r '.security_assessment.overall_risk_level // "UNKNOWN"' ${{ inputs.security-data-file }})
        
        # Create issue for critical vulnerabilities
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "Creating issue for critical vulnerabilities..."
          gh issue create \
            --title "üö® Critical Security Vulnerabilities Detected (PR #${{ inputs.pr-number }})" \
            --label "security,critical,vulnerability" \
            --assignee "ZarichneyDevelopment" \
            --body "$(cat << EOF
        ## Critical Security Alert
        
        **Detected in PR #${{ inputs.pr-number }}**
        
        Our automated security analysis has identified **$CRITICAL_VULNS critical vulnerabilities** that require immediate attention.
        
        ### üîç Analysis Summary
        - **Critical Vulnerabilities:** $CRITICAL_VULNS
        - **High Severity Issues:** $HIGH_VULNS  
        - **Overall Risk Level:** $RISK_LEVEL
        - **Secrets Detected:** $SECRETS_COUNT
        
        ### üö® Immediate Actions Required
        1. **Block Deployment** - Do not merge PR #${{ inputs.pr-number }} until resolved
        2. **Security Review** - Conduct immediate security assessment
        3. **Vulnerability Remediation** - Address all critical findings
        4. **Validation Testing** - Verify fixes before re-deployment
        
        ### üìä Security Analysis Data
        Full analysis available in PR #${{ inputs.pr-number }} security analysis comment.
        
        ### üîó Related Links
        - **Pull Request:** #${{ inputs.pr-number }}
        - **Security Analysis:** [View in PR comments](https://github.com/${{ github.repository }}/pull/${{ inputs.pr-number }})
        
        **Priority:** Critical - Immediate Action Required
        **Auto-generated by:** Security Analysis Workflow
        EOF
        )"
        fi
        
        # Create issue for secrets detection
        if [ "$SECRETS_COUNT" -gt 0 ]; then
          echo "Creating issue for detected secrets..."
          gh issue create \
            --title "üîê Secrets Detected in Codebase (PR #${{ inputs.pr-number }})" \
            --label "security,secrets,critical" \
            --assignee "ZarichneyDevelopment" \
            --body "$(cat << EOF
        ## Secrets Detection Alert
        
        **Detected in PR #${{ inputs.pr-number }}**
        
        Our TruffleHog security scan has detected **$SECRETS_COUNT potential secrets** in the codebase.
        
        ### üö® Immediate Actions Required
        1. **Verify Findings** - Review detected secrets for validity
        2. **Rotate Credentials** - If real secrets found, rotate immediately
        3. **Remove Secrets** - Clean secrets from git history if needed
        4. **Update Security Practices** - Implement proper secrets management
        
        ### üîß Remediation Steps
        1. Review the security analysis in PR #${{ inputs.pr-number }}
        2. Use \`git-secrets\` or similar tools to prevent future commits
        3. Implement proper environment variable management
        4. Consider using secrets management services (AWS Secrets Manager, etc.)
        
        ### üìä Detection Details
        - **Secrets Count:** $SECRETS_COUNT
        - **Scan Tool:** TruffleHog OSS
        - **Detection Type:** Verified secrets only
        
        **Priority:** Critical - Immediate Action Required
        **Auto-generated by:** Security Analysis Workflow
        EOF
        )"
        fi
        
        # Create issue for high dependency vulnerabilities
        if [ "$DEPENDENCY_VULNS" -gt 10 ]; then
          echo "Creating issue for dependency vulnerabilities..."
          gh issue create \
            --title "üì¶ High Volume of Dependency Vulnerabilities (PR #${{ inputs.pr-number }})" \
            --label "security,dependencies,vulnerability" \
            --assignee "ZarichneyDevelopment" \
            --body "$(cat << EOF
        ## Dependency Security Alert
        
        **Detected in PR #${{ inputs.pr-number }}**
        
        Our dependency scan has identified **$DEPENDENCY_VULNS vulnerabilities** across .NET and Node.js dependencies.
        
        ### üìä Vulnerability Breakdown
        - **Total Vulnerabilities:** $DEPENDENCY_VULNS
        - **Critical Issues:** $CRITICAL_VULNS
        - **High Severity:** $HIGH_VULNS
        
        ### üîß Recommended Actions
        1. **Review Dependencies** - Analyze all vulnerable packages
        2. **Update Packages** - Upgrade to patched versions where available
        3. **Security Audit** - Run \`npm audit fix\` and \`dotnet list package --vulnerable\`
        4. **Alternative Packages** - Consider replacing unmaintained dependencies
        
        ### üõ†Ô∏è Tools & Commands
        ```bash
        # .NET Dependencies
        dotnet list package --vulnerable --include-transitive
        dotnet add package [PackageName] --version [LatestVersion]
        
        # Node.js Dependencies  
        npm audit
        npm audit fix
        npm update
        ```
        
        ### üìã Next Steps
        1. Review detailed analysis in PR #${{ inputs.pr-number }}
        2. Prioritize critical and high severity vulnerabilities
        3. Test application after dependency updates
        4. Monitor for new vulnerabilities using Dependabot
        
        **Priority:** High - Address within current sprint
        **Auto-generated by:** Security Analysis Workflow
        EOF
        )"
        fi
        
        echo "‚úÖ Security issues created successfully"
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}