name: "03 ‚Ä¢ Security Analysis"

on:
  workflow_run:
    workflows: ["01 ‚Ä¢ Build & Test"]
    types:
      - completed
    branches: [main]  # Security analysis only for PRs targeting main branch
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2 AM
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  security-scanning:
    name: "Security Scanning"
    runs-on: ubuntu-latest
    if: always() && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0].base.ref == 'main'
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        scan-type: ['codeql', 'dependencies', 'secrets', 'policy']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup development environment
        if: matrix.scan-type == 'dependencies'
        uses: ./.github/actions/shared/setup-environment
        with:
          setup-dotnet: 'true'
          setup-node: 'true'
          dotnet-version: '8.0.x'
          node-version: '18.x'

      - name: Initialize CodeQL
        if: matrix.scan-type == 'codeql'
        uses: github/codeql-action/init@v2
        with:
          languages: 'csharp,javascript'
          config-file: ./.github/codeql/codeql-config.yml
          queries: security-extended,security-and-quality

      - name: Build for CodeQL
        if: matrix.scan-type == 'codeql'
        run: |
          # Build backend for CodeQL analysis
          dotnet restore zarichney-api.sln
          dotnet build zarichney-api.sln --configuration Release --no-restore
          
          # Build frontend for CodeQL analysis
          cd Code/Zarichney.Website
          npm ci --legacy-peer-deps
          npm run build-prod

      - name: Perform CodeQL Analysis
        if: matrix.scan-type == 'codeql'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

      - name: Run security scans
        run: |
          echo "üîí Running security scanning pipeline..."
          
          # Set environment variables
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export BASE_BRANCH="${{ github.event.repository.default_branch }}"
          export HEAD_SHA="${{ github.sha }}"
          
          # Make scripts executable
          chmod +x ./Scripts/Pipeline/run-security-scans.sh
          chmod +x ./Scripts/Pipeline/*.sh
          
          # Execute security scanning based on matrix type
          case "${{ matrix.scan-type }}" in
            "codeql")
              echo "CodeQL analysis handled by GitHub Actions"
              ;;
            "dependencies")
              ./Scripts/Pipeline/run-security-scans.sh --deps-only --skip-analysis
              ;;
            "secrets")
              ./Scripts/Pipeline/run-security-scans.sh --secrets-only --skip-analysis
              ;;
            "policy")
              ./Scripts/Pipeline/run-security-scans.sh --policy-only --skip-analysis
              ;;
          esac

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.scan-type }}-${{ github.run_number }}
          path: |
            security-analysis/
            artifacts/security/
          retention-days: 90

  security-analysis:
    name: "Security Analysis & Reporting"
    runs-on: ubuntu-latest
    needs: security-scanning
    if: always() && !cancelled() && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0].base.ref == 'main'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security scan results
        uses: actions/download-artifact@v4
        with:
          pattern: security-scan-*-${{ github.run_number }}
          path: security-results/
          merge-multiple: true

      - name: Get PR Number (if applicable)
        id: pr-number
        run: |
          PR_NUMBER=""
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Extract PR number from workflow run
            PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls --jq ".[] | select(.head.sha==\"${{ github.event.workflow_run.head_sha }}\") | .number")
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "PR number: ${PR_NUMBER:-'N/A (main branch scan)'}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR check run
        id: create-check
        if: steps.pr-number.outputs.pr_number != ''
        run: |
          CHECK_RUN_ID=$(gh api repos/${{ github.repository }}/check-runs \
            --method POST \
            --field name="Security Analysis" \
            --field head_sha="${{ github.event.workflow_run.head_sha || github.sha }}" \
            --field status="in_progress" \
            --field details_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --jq '.id')
          echo "check_run_id=$CHECK_RUN_ID" >> $GITHUB_OUTPUT
          echo "Created check run ID: $CHECK_RUN_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run comprehensive security analysis
        id: security-analysis
        run: |
          echo "üõ°Ô∏è Running comprehensive security analysis..."
          
          # Set environment variables
          export PR_NUMBER="${{ steps.pr-number.outputs.pr_number }}"
          export BASE_BRANCH="${{ github.event.repository.default_branch }}"
          export HEAD_SHA="${{ github.sha }}"
          export CLAUDE_CODE_OAUTH_TOKEN="${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Consolidate security results
          mkdir -p security-analysis
          cp -r security-results/* security-analysis/ 2>/dev/null || true
          
          # Make scripts executable and execute comprehensive security analysis
          chmod +x ./Scripts/Pipeline/run-security-scans.sh
          chmod +x ./Scripts/Pipeline/*.sh
          ./Scripts/Pipeline/run-security-scans.sh \
            ${PR_NUMBER:+--pr-number "$PR_NUMBER"} \
            --base-branch "$BASE_BRANCH" \
            --head-sha "$HEAD_SHA" \
            --skip-analysis false

      - name: Post security analysis to PR
        if: steps.pr-number.outputs.pr_number != ''
        uses: ./.github/actions/shared/post-results
        with:
          pr-number: ${{ steps.pr-number.outputs.pr_number }}
          report-file: security-report.md
          report-type: security
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check security gates
        if: steps.security-analysis.outputs.deployment_safe == 'false'
        run: |
          echo "üö® Security gates failed - deployment blocked"
          echo "Critical issues: ${{ steps.security-analysis.outputs.critical_issues }}"
          echo "High severity issues: ${{ steps.security-analysis.outputs.high_issues }}"
          echo "Security score: ${{ steps.security-analysis.outputs.security_score }}/100"
          echo ""
          echo "Critical security issues must be resolved before deployment"
          exit 1

      - name: Create security issues
        if: always() && steps.security-analysis.outputs.create_issues == 'true'
        uses: ./.github/actions/create-security-issues
        continue-on-error: true
        with:
          pr-number: ${{ steps.pr-number.outputs.pr_number || '' }}
          security-data-file: artifacts/security/security-analysis-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete PR check run
        if: always() && steps.create-check.outputs.check_run_id != ''
        run: |
          # Determine conclusion based on job result and security gates
          if [ "${{ job.status }}" = "success" ] && [ "${{ steps.security-analysis.outputs.deployment_safe }}" = "true" ]; then
            CONCLUSION="success"
            TITLE="‚úÖ Security Analysis Passed"
            SUMMARY="All security scans passed - deployment safe"
          elif [ "${{ steps.security-analysis.outputs.deployment_safe }}" = "false" ]; then
            CONCLUSION="failure"
            TITLE="üö® Security Issues Detected"
            SUMMARY="Critical security issues found - deployment blocked"
          elif [ "${{ job.status }}" = "failure" ]; then
            CONCLUSION="failure"
            TITLE="‚ùå Security Analysis Failed"
            SUMMARY="Security analysis failed to complete"
          else
            CONCLUSION="neutral"
            TITLE="‚ö†Ô∏è Security Analysis Completed"
            SUMMARY="Security analysis completed with warnings"
          fi
          
          gh api repos/${{ github.repository }}/check-runs/${{ steps.create-check.outputs.check_run_id }} \
            --method PATCH \
            --field status="completed" \
            --field conclusion="$CONCLUSION" \
            --field output[title]="$TITLE" \
            --field output[summary]="$SUMMARY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-${{ github.run_number }}
          path: artifacts/security/
          retention-days: 90

  security-summary:
    name: "Security Summary"
    runs-on: ubuntu-latest
    needs: [security-scanning, security-analysis]
    if: always() && !cancelled() && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0].base.ref == 'main'
    
    steps:
      - name: Generate security summary
        run: |
          echo "üõ°Ô∏è Security Analysis Summary"
          echo "============================"
          echo ""
          echo "**Scan Results:**"
          echo "  - Security scanning: ${{ needs.security-scanning.result }}"
          echo "  - Security analysis: ${{ needs.security-analysis.result }}"
          echo ""
          
          if [ "${{ needs.security-analysis.result }}" = "failure" ]; then
            echo "üö® Critical security issues detected - deployment blocked"
          elif [ "${{ needs.security-analysis.result }}" = "success" ]; then
            echo "‚úÖ All security gates passed"
          else
            echo "‚ö†Ô∏è Security analysis incomplete"
          fi
          
          echo ""
          echo "**Scan Coverage:**"
          echo "  - CodeQL static analysis"
          echo "  - Dependency vulnerability scanning"
          echo "  - Secrets detection"
          echo "  - Security policy compliance"
          echo "  - AI-powered threat analysis"