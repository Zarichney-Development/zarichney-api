name: "Security Policy Compliance"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 4 * * 3'  # Weekly on Wednesdays
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    # DISABLED: Replaced by Security: Comprehensive Analysis Suite workflow
    if: false
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy files
      run: |
        echo "Checking for required security policy files..."
        
        # Check for SECURITY.md
        if [ ! -f "SECURITY.md" ]; then
          echo "::warning::SECURITY.md file not found. Consider adding security reporting guidelines."
        else
          echo "✓ SECURITY.md found"
        fi
        
        # Check for .github/SECURITY.md
        if [ ! -f ".github/SECURITY.md" ]; then
          echo "::warning::.github/SECURITY.md file not found"
        else
          echo "✓ .github/SECURITY.md found"
        fi

    - name: Validate workflow security permissions
      run: |
        echo "Validating GitHub Actions security permissions..."
        
        # Check for minimal permissions in workflows
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "Checking $file..."
          
          # Check if permissions are explicitly defined
          if grep -q "permissions:" "$file"; then
            echo "✓ Permissions defined in $file"
          else
            echo "::warning::No explicit permissions defined in $file"
          fi
          
          # Check for dangerous permissions (excluding this security validation workflow)
          if ! echo "$file" | grep -q "security-policy.yml" && grep -q "permissions:.*write-all\|permissions:.*contents:.*write.*actions:.*write" "$file"; then
            echo "::error::Dangerous permissions found in $file"
            exit 1
          fi
        done

    - name: Check for environment variable security
      run: |
        echo "Checking for hardcoded secrets or sensitive data..."
        
        # Look for potential hardcoded secrets (basic patterns)
        # Exclude test files, migrations, and configuration templates
        if grep -r -i --include="*.cs" --include="*.js" --include="*.ts" --include="*.json" \
           --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj --exclude-dir=TestResults \
           --exclude="*.test.*" --exclude="*.spec.*" --exclude="*Migration*" \
           -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{12,}['\"]" . 2>/dev/null; then
          echo "::warning::Potential hardcoded secrets found. Please review manually to ensure these are not actual secrets."
        else
          echo "✓ No obvious hardcoded secrets detected"
        fi

    - name: Validate dependency security configuration
      run: |
        echo "Validating dependency security configuration..."
        
        # Check Dependabot configuration
        if [ -f ".github/dependabot.yml" ]; then
          echo "✓ Dependabot configuration found"
          
          # Validate security-focused settings
          if grep -q "security" ".github/dependabot.yml"; then
            echo "✓ Security labels configured in Dependabot"
          else
            echo "::warning::Consider adding security labels to Dependabot config"
          fi
        else
          echo "::warning::Dependabot configuration not found"
        fi

    - name: Check HTTPS enforcement
      run: |
        echo "Checking for HTTPS enforcement in configuration files..."
        
        # Check for HTTP URLs that should be HTTPS
        if grep -r -i --include="*.cs" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" \
           "http://.*\.com\|http://.*\.org\|http://.*\.net" . --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj; then
          echo "::warning::HTTP URLs found that might need HTTPS. Please review."
        else
          echo "✓ No HTTP URLs detected in configuration"
        fi

    - name: Summary
      run: |
        echo "Security policy compliance check completed."
        echo "Review any warnings above and address them as needed."