name: "Automated Workflow - Auto-Testing Coverage - Scheduler"

# Scheduler Workflow for Testing Coverage Automation
# Triggers the main coverage epic workflow every 6 hours via workflow_dispatch
# This separation allows Claude Code action compatibility while preserving scheduled automation

on:
  schedule:
    # Run every 6 hours: 00:00, 06:00, 12:00, 18:00 UTC
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_trigger:
        description: 'Force trigger even if conditions would normally skip'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual scheduler execution'
        type: string

permissions:
  contents: read
  actions: write

jobs:
  check-and-trigger:
    name: "Check Activity and Trigger Coverage Workflow"
    runs-on: ubuntu-latest

    # Only run on main repository, not forks
    if: github.repository == 'Zarichney-Development/zarichney-api'

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to check for recent activity

      - name: "Check Repository Activity"
        id: activity_check
        run: |
          echo "üîç Checking repository activity..."

          # Check for commits in the last 72 hours (3 days)
          RECENT_COMMITS=$(git log --since="72 hours ago" --oneline | wc -l)
          echo "üìä Commits in last 72 hours: $RECENT_COMMITS"

          # Check if force trigger is requested
          FORCE_TRIGGER="${{ github.event.inputs.force_trigger }}"

          if [ "$RECENT_COMMITS" -gt 0 ] || [ "$FORCE_TRIGGER" = "true" ]; then
            if [ "$FORCE_TRIGGER" = "true" ]; then
              echo "‚ö†Ô∏è Force trigger requested - bypassing activity check"
              echo "trigger_reason=Force trigger requested: ${{ github.event.inputs.reason }}" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Repository has recent activity - proceeding with trigger"
              echo "trigger_reason=Scheduled run with $RECENT_COMMITS recent commits" >> $GITHUB_OUTPUT
            fi
            echo "should_trigger=true" >> $GITHUB_OUTPUT
            echo "activity_status=active" >> $GITHUB_OUTPUT
          else
            echo "‚è∏Ô∏è No recent activity detected - skipping trigger to conserve resources"
            echo "should_trigger=false" >> $GITHUB_OUTPUT
            echo "activity_status=inactive" >> $GITHUB_OUTPUT
            echo "trigger_reason=No activity in last 72 hours" >> $GITHUB_OUTPUT
          fi

          # Additional check for epic branch activity
          EPIC_BRANCH="epic/testing-coverage"
          if git show-ref --verify --quiet refs/remotes/origin/$EPIC_BRANCH; then
            EPIC_ACTIVITY=$(git log origin/$EPIC_BRANCH --since="24 hours ago" --oneline | wc -l)
            echo "üìà Epic branch commits in last 24 hours: $EPIC_ACTIVITY"

            if [ "$EPIC_ACTIVITY" -gt 0 ]; then
              echo "üí° Recent epic branch activity detected"
              echo "epic_activity=true" >> $GITHUB_OUTPUT
            else
              echo "epic_activity=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "epic_activity=false" >> $GITHUB_OUTPUT
          fi

      - name: "Check for Pending Coverage Work"
        id: pending_check
        if: steps.activity_check.outputs.should_trigger == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking for pending coverage PRs..."

          # Check for open PRs with coverage-related labels
          OPEN_COVERAGE_PRS=$(gh pr list --state open --label "coverage" --label "testing" --label "ai-task" --json number,title,createdAt --jq 'length')

          echo "üìä Open coverage PRs: $OPEN_COVERAGE_PRS"

          # Check if there's a very recent PR (within last 2 hours)
          RECENT_PR_COUNT=$(gh pr list --state open --label "coverage" --label "testing" --label "ai-task" --json createdAt --jq '[.[] | select(.createdAt > (now - 7200 | strftime("%Y-%m-%dT%H:%M:%SZ")))] | length')

          if [ "$RECENT_PR_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è Recent coverage PR detected (within 2 hours) - may want to wait"
            echo "recent_pr_warning=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No very recent coverage PRs - safe to proceed"
            echo "recent_pr_warning=false" >> $GITHUB_OUTPUT
          fi

          echo "pending_pr_count=$OPEN_COVERAGE_PRS" >> $GITHUB_OUTPUT

      - name: "Trigger Testing Coverage Automation"
        if: steps.activity_check.outputs.should_trigger == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Triggering Testing Coverage Automation workflow..."

          # Determine trigger source
          if [ "${{ github.event_name }}" = "schedule" ]; then
            TRIGGER_SOURCE="scheduled"
          else
            TRIGGER_SOURCE="manual_scheduler"
          fi

          # Prepare trigger reason with additional context
          TRIGGER_REASON="${{ steps.activity_check.outputs.trigger_reason }}"
          if [ "${{ steps.pending_check.outputs.recent_pr_warning }}" = "true" ]; then
            TRIGGER_REASON="$TRIGGER_REASON (Warning: Recent PR within 2 hours)"
          fi
          if [ "${{ steps.pending_check.outputs.pending_pr_count }}" -gt 3 ]; then
            TRIGGER_REASON="$TRIGGER_REASON (Note: ${{ steps.pending_check.outputs.pending_pr_count }} pending coverage PRs)"
          fi

          # Trigger the main workflow
          gh workflow run testing-coverage-execution.yml \
            --field scheduled_trigger=true \
            --field trigger_source="$TRIGGER_SOURCE" \
            --field trigger_reason="$TRIGGER_REASON"

          echo "‚úÖ Testing Coverage Automation workflow triggered successfully"
          echo "üìã Trigger details:"
          echo "  - Source: $TRIGGER_SOURCE"
          echo "  - Reason: $TRIGGER_REASON"
          echo "  - Activity Status: ${{ steps.activity_check.outputs.activity_status }}"
          echo "  - Epic Activity: ${{ steps.activity_check.outputs.epic_activity }}"
          echo "  - Pending PRs: ${{ steps.pending_check.outputs.pending_pr_count }}"

      - name: "Skip Notification"
        if: steps.activity_check.outputs.should_trigger == 'false'
        run: |
          echo "‚ÑπÔ∏è Testing Coverage Automation skipped"
          echo "üìã Reason: ${{ steps.activity_check.outputs.trigger_reason }}"
          echo ""
          echo "This is expected behavior to conserve resources when the repository is inactive."
          echo "The workflow will automatically resume when new commits are detected."
          echo ""
          echo "To force execution regardless of activity:"
          echo "  gh workflow run testing-coverage-scheduler.yml --field force_trigger=true"

      - name: "Execution Summary"
        if: always()
        run: |
          echo "=================================================="
          echo "üìÖ Testing Coverage Scheduler Summary"
          echo "=================================================="
          echo "‚è∞ Execution Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üîÑ Event Type: ${{ github.event_name }}"
          echo "üìä Repository Activity: ${{ steps.activity_check.outputs.activity_status || 'unknown' }}"
          echo "üéØ Workflow Triggered: ${{ steps.activity_check.outputs.should_trigger || 'false' }}"
          echo ""
          if [ "${{ steps.activity_check.outputs.should_trigger }}" = "true" ]; then
            echo "‚úÖ Testing Coverage Automation workflow has been triggered"
            echo "üìù Trigger Reason: ${{ steps.activity_check.outputs.trigger_reason }}"
            echo "‚ö†Ô∏è Recent PR Warning: ${{ steps.pending_check.outputs.recent_pr_warning || 'false' }}"
            echo "üìà Pending Coverage PRs: ${{ steps.pending_check.outputs.pending_pr_count || '0' }}"
          else
            echo "‚è∏Ô∏è No trigger performed - repository inactive"
            echo "üí° Next scheduled check in 6 hours"
          fi
          echo "=================================================="
