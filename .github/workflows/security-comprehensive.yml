name: "Security: Comprehensive Analysis Suite"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Mondays at 2:00 AM UTC
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write  # Required for posting PR comments

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Cache .NET packages
      if: matrix.language == 'csharp'
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup .NET
      if: matrix.language == 'csharp'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build .NET application
      if: matrix.language == 'csharp'
      run: |
        for i in {1..3}; do
          if dotnet restore zarichney-api.sln; then
            break
          else
            echo "Restore attempt $i failed, retrying in 5 seconds..."
            sleep 5
          fi
        done
        dotnet build zarichney-api.sln --configuration Release --no-restore

    - name: Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Code/Zarichney.Website/package-lock.json

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd Code/Zarichney.Website
        npm ci --legacy-peer-deps

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

    - name: Generate CodeQL Results Summary
      if: always()
      run: |
        mkdir -p ./SecurityResults
        echo "{
          \"language\": \"${{ matrix.language }}\",
          \"analysis_completed\": true,
          \"timestamp\": \"$(date -Iseconds)\",
          \"status\": \"completed\"
        }" > ./SecurityResults/codeql-${{ matrix.language }}-results.json

    - name: Upload CodeQL Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: codeql-results-${{ matrix.language }}
        path: ./SecurityResults/codeql-${{ matrix.language }}-results.json
        retention-days: 30

  dependency-security:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Code/Zarichney.Website/package-lock.json

    - name: Install .NET dependencies
      run: dotnet restore zarichney-api.sln

    - name: Install Node.js dependencies
      run: |
        cd Code/Zarichney.Website
        npm ci --legacy-peer-deps

    - name: Run .NET security audit
      run: |
        mkdir -p ./SecurityResults
        for i in {1..3}; do
          if dotnet list zarichney-api.sln package --vulnerable --include-transitive 2>&1 | tee ./SecurityResults/dotnet-audit.log; then
            break
          else
            echo "Audit attempt $i failed, retrying in 5 seconds..."
            sleep 5
          fi
        done
        
        # Parse .NET audit results
        if grep -q "has the following vulnerable packages" ./SecurityResults/dotnet-audit.log; then
          DOTNET_VULNERABILITIES=$(grep -c "has the following vulnerable packages" ./SecurityResults/dotnet-audit.log || echo "0")
          echo "{\"vulnerabilities_found\": true, \"count\": $DOTNET_VULNERABILITIES}" > ./SecurityResults/dotnet-audit-summary.json
        else
          echo "{\"vulnerabilities_found\": false, \"count\": 0}" > ./SecurityResults/dotnet-audit-summary.json
        fi

    - name: Run Node.js security audit
      run: |
        cd Code/Zarichney.Website
        npm audit --audit-level moderate --json > ../SecurityResults/npm-audit.json || true
        
        # Parse Node.js audit results
        if [ -s "../SecurityResults/npm-audit.json" ] && [ "$(jq '.metadata.vulnerabilities.total' ../SecurityResults/npm-audit.json)" -gt 0 ]; then
          TOTAL_VULNS=$(jq '.metadata.vulnerabilities.total' ../SecurityResults/npm-audit.json)
          CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' ../SecurityResults/npm-audit.json)
          HIGH=$(jq '.metadata.vulnerabilities.high // 0' ../SecurityResults/npm-audit.json)
          MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' ../SecurityResults/npm-audit.json)
          LOW=$(jq '.metadata.vulnerabilities.low // 0' ../SecurityResults/npm-audit.json)
          
          echo "{
            \"vulnerabilities_found\": true,
            \"total_vulnerabilities\": $TOTAL_VULNS,
            \"critical\": $CRITICAL,
            \"high\": $HIGH,
            \"moderate\": $MODERATE,
            \"low\": $LOW
          }" > ../SecurityResults/npm-audit-summary.json
        else
          echo "{\"vulnerabilities_found\": false, \"total_vulnerabilities\": 0}" > ../SecurityResults/npm-audit-summary.json
        fi

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-security-results
        path: |
          SecurityResults/dotnet-audit.log
          SecurityResults/dotnet-audit-summary.json
          SecurityResults/npm-audit.json
          SecurityResults/npm-audit-summary.json
        retention-days: 30

  policy-compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy files
      run: |
        mkdir -p ./SecurityResults
        POLICY_VIOLATIONS=0
        POLICY_RESULTS=""
        
        echo "Checking for required security policy files..."
        
        # Check for SECURITY.md
        if [ ! -f "SECURITY.md" ]; then
          echo "::warning::SECURITY.md file not found. Consider adding security reporting guidelines."
          POLICY_VIOLATIONS=$((POLICY_VIOLATIONS + 1))
          POLICY_RESULTS="$POLICY_RESULTS\n- Missing SECURITY.md file"
        else
          echo "✓ SECURITY.md found"
        fi
        
        # Check for .github/SECURITY.md
        if [ ! -f ".github/SECURITY.md" ]; then
          echo "::warning::.github/SECURITY.md file not found"
          POLICY_VIOLATIONS=$((POLICY_VIOLATIONS + 1))
          POLICY_RESULTS="$POLICY_RESULTS\n- Missing .github/SECURITY.md file"
        else
          echo "✓ .github/SECURITY.md found"
        fi
        
        echo "{
          \"security_policy_violations\": $POLICY_VIOLATIONS,
          \"violations\": \"$POLICY_RESULTS\"
        }" > ./SecurityResults/policy-compliance-results.json

    - name: Validate workflow security permissions
      run: |
        echo "Validating GitHub Actions security permissions..."
        PERMISSION_VIOLATIONS=0
        PERMISSION_ISSUES=""
        
        # Check for minimal permissions in workflows
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
          echo "Checking $file..."
          
          # Check if permissions are explicitly defined
          if grep -q "permissions:" "$file"; then
            echo "✓ Permissions defined in $file"
          else
            echo "::warning::No explicit permissions defined in $file"
            PERMISSION_VIOLATIONS=$((PERMISSION_VIOLATIONS + 1))
            PERMISSION_ISSUES="$PERMISSION_ISSUES\n- $file: Missing explicit permissions"
          fi
          
          # Check for dangerous permissions (excluding this security validation workflow)
          if ! echo "$file" | grep -q "security-comprehensive.yml" && grep -q "permissions:.*write-all\|permissions:.*contents:.*write.*actions:.*write" "$file"; then
            echo "::error::Dangerous permissions found in $file"
            PERMISSION_VIOLATIONS=$((PERMISSION_VIOLATIONS + 1))
            PERMISSION_ISSUES="$PERMISSION_ISSUES\n- $file: Dangerous permissions detected"
          fi
        done
        
        echo "{
          \"permission_violations\": $PERMISSION_VIOLATIONS,
          \"issues\": \"$PERMISSION_ISSUES\"
        }" > ./SecurityResults/permission-validation-results.json

    - name: Check for environment variable security
      run: |
        echo "Checking for hardcoded secrets or sensitive data..."
        SECRET_VIOLATIONS=0
        SECRET_ISSUES=""
        
        # Look for potential hardcoded secrets (basic patterns)
        if grep -r -i --include="*.cs" --include="*.js" --include="*.ts" --include="*.json" \
           --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj --exclude-dir=TestResults \
           --exclude="*.test.*" --exclude="*.spec.*" --exclude="*Migration*" \
           -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{12,}['\"]" . 2>/dev/null; then
          echo "::warning::Potential hardcoded secrets found. Please review manually to ensure these are not actual secrets."
          SECRET_VIOLATIONS=$((SECRET_VIOLATIONS + 1))
          SECRET_ISSUES="Potential hardcoded secrets detected"
        else
          echo "✓ No obvious hardcoded secrets detected"
        fi
        
        echo "{
          \"secret_violations\": $SECRET_VIOLATIONS,
          \"issues\": \"$SECRET_ISSUES\"
        }" > ./SecurityResults/secret-scan-results.json

    - name: Validate dependency security configuration
      run: |
        echo "Validating dependency security configuration..."
        DEPENDENCY_VIOLATIONS=0
        DEPENDENCY_ISSUES=""
        
        # Check Dependabot configuration
        if [ -f ".github/dependabot.yml" ]; then
          echo "✓ Dependabot configuration found"
          
          # Validate security-focused settings
          if grep -q "security" ".github/dependabot.yml"; then
            echo "✓ Security labels configured in Dependabot"
          else
            echo "::warning::Consider adding security labels to Dependabot config"
            DEPENDENCY_VIOLATIONS=$((DEPENDENCY_VIOLATIONS + 1))
            DEPENDENCY_ISSUES="Missing security labels in Dependabot configuration"
          fi
        else
          echo "::warning::Dependabot configuration not found"
          DEPENDENCY_VIOLATIONS=$((DEPENDENCY_VIOLATIONS + 1))
          DEPENDENCY_ISSUES="Missing Dependabot configuration"
        fi
        
        echo "{
          \"dependency_violations\": $DEPENDENCY_VIOLATIONS,
          \"issues\": \"$DEPENDENCY_ISSUES\"
        }" > ./SecurityResults/dependency-config-results.json

    - name: Check HTTPS enforcement
      run: |
        echo "Checking for HTTPS enforcement in configuration files..."
        HTTPS_VIOLATIONS=0
        HTTPS_ISSUES=""
        
        # Check for HTTP URLs that should be HTTPS
        if grep -r -i --include="*.cs" --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" \
           "http://.*\.com\|http://.*\.org\|http://.*\.net" . --exclude-dir=node_modules --exclude-dir=bin --exclude-dir=obj; then
          echo "::warning::HTTP URLs found that might need HTTPS. Please review."
          HTTPS_VIOLATIONS=$((HTTPS_VIOLATIONS + 1))
          HTTPS_ISSUES="HTTP URLs detected that should potentially be HTTPS"
        else
          echo "✓ No HTTP URLs detected in configuration"
        fi
        
        echo "{
          \"https_violations\": $HTTPS_VIOLATIONS,
          \"issues\": \"$HTTPS_ISSUES\"
        }" > ./SecurityResults/https-check-results.json

    - name: Consolidate policy compliance results
      run: |
        # Combine all policy compliance results
        echo "{
          \"overall_compliance\": {
            \"timestamp\": \"$(date -Iseconds)\",
            \"total_violations\": $(( $(jq '.security_policy_violations // 0' ./SecurityResults/policy-compliance-results.json) + $(jq '.permission_violations // 0' ./SecurityResults/permission-validation-results.json) + $(jq '.secret_violations // 0' ./SecurityResults/secret-scan-results.json) + $(jq '.dependency_violations // 0' ./SecurityResults/dependency-config-results.json) + $(jq '.https_violations // 0' ./SecurityResults/https-check-results.json) )),
            \"status\": \"completed\"
          }
        }" > ./SecurityResults/policy-compliance-summary.json

    - name: Upload policy compliance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: policy-compliance-results
        path: |
          SecurityResults/policy-compliance-results.json
          SecurityResults/permission-validation-results.json
          SecurityResults/secret-scan-results.json
          SecurityResults/dependency-config-results.json
          SecurityResults/https-check-results.json
          SecurityResults/policy-compliance-summary.json
        retention-days: 30

  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for secret scanning

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json
      continue-on-error: true

    - name: Process TruffleHog results
      if: always()
      run: |
        mkdir -p ./SecurityResults
        
        # Check if TruffleHog found any secrets
        if [ -f "trufflehog_results.json" ]; then
          SECRET_COUNT=$(jq length trufflehog_results.json)
        else
          SECRET_COUNT=0
        fi
        
        echo "{
          \"secrets_detected\": $([ $SECRET_COUNT -gt 0 ] && echo "true" || echo "false"),
          \"secret_count\": $SECRET_COUNT,
          \"scan_completed\": true,
          \"timestamp\": \"$(date -Iseconds)\"
        }" > ./SecurityResults/secrets-detection-results.json
        
        if [ $SECRET_COUNT -gt 0 ]; then
          echo "::warning::$SECRET_COUNT potential secrets detected by TruffleHog"
          cp trufflehog_results.json ./SecurityResults/ || true
        else
          echo "✓ No secrets detected by TruffleHog"
        fi

    - name: Upload secrets detection results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-detection-results
        path: |
          SecurityResults/secrets-detection-results.json
          SecurityResults/trufflehog_results.json
        retention-days: 30

  security-reporting:
    name: Security Analysis & Reporting
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-security, policy-compliance, secrets-detection]
    if: always()
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./AllSecurityResults

    - name: Prepare Security Data for AI Analysis
      run: |
        echo "📊 Preparing security data for Claude AI analysis..."
        mkdir -p ./SecurityResults
        
        # Initialize default values
        CODEQL_COMPLETED=false
        DEPENDENCY_VULNERABILITIES=0
        POLICY_VIOLATIONS=0
        SECRETS_DETECTED=false
        SECRET_COUNT=0
        
        # Process CodeQL results
        if [ -d "./AllSecurityResults" ]; then
          if ls ./AllSecurityResults/codeql-results-*/codeql-*-results.json 1> /dev/null 2>&1; then
            CODEQL_COMPLETED=true
          fi
        fi
        
        # Process dependency scan results
        if [ -f "./AllSecurityResults/dependency-security-results/dotnet-audit-summary.json" ]; then
          DOTNET_VULNERABILITIES=$(jq -r '.vulnerabilities_found // false' ./AllSecurityResults/dependency-security-results/dotnet-audit-summary.json)
        else
          DOTNET_VULNERABILITIES=false
        fi
        
        if [ -f "./AllSecurityResults/dependency-security-results/npm-audit-summary.json" ]; then
          NPM_TOTAL_VULNERABILITIES=$(jq -r '.total_vulnerabilities // 0' ./AllSecurityResults/dependency-security-results/npm-audit-summary.json)
          NPM_CRITICAL=$(jq -r '.critical // 0' ./AllSecurityResults/dependency-security-results/npm-audit-summary.json)
          NPM_HIGH=$(jq -r '.high // 0' ./AllSecurityResults/dependency-security-results/npm-audit-summary.json)
        else
          NPM_TOTAL_VULNERABILITIES=0
          NPM_CRITICAL=0
          NPM_HIGH=0
        fi
        
        DEPENDENCY_VULNERABILITIES=$((NPM_TOTAL_VULNERABILITIES))
        
        # Process policy compliance results
        if [ -f "./AllSecurityResults/policy-compliance-results/policy-compliance-summary.json" ]; then
          POLICY_VIOLATIONS=$(jq -r '.overall_compliance.total_violations // 0' ./AllSecurityResults/policy-compliance-results/policy-compliance-summary.json)
        fi
        
        # Process secrets detection results
        if [ -f "./AllSecurityResults/secrets-detection-results/secrets-detection-results.json" ]; then
          SECRETS_DETECTED=$(jq -r '.secrets_detected // false' ./AllSecurityResults/secrets-detection-results/secrets-detection-results.json)
          SECRET_COUNT=$(jq -r '.secret_count // 0' ./AllSecurityResults/secrets-detection-results/secrets-detection-results.json)
        fi
        
        # Calculate overall security risk level
        RISK_LEVEL="LOW"
        if [ "$SECRET_COUNT" -gt 0 ] || [ "$NPM_CRITICAL" -gt 0 ]; then
          RISK_LEVEL="CRITICAL"
        elif [ "$NPM_HIGH" -gt 0 ] || [ "$DEPENDENCY_VULNERABILITIES" -gt 5 ]; then
          RISK_LEVEL="HIGH"
        elif [ "$DEPENDENCY_VULNERABILITIES" -gt 0 ] || [ "$POLICY_VIOLATIONS" -gt 2 ]; then
          RISK_LEVEL="MEDIUM"
        fi
        
        # Determine deployment recommendation
        DEPLOY_RECOMMENDED=true
        if [ "$RISK_LEVEL" = "CRITICAL" ] || [ "$SECRET_COUNT" -gt 0 ]; then
          DEPLOY_RECOMMENDED=false
        fi
        
        # Create comprehensive security analysis data for Claude
        cat > ./SecurityResults/security_analysis_data.json << EOF
        {
          "project": "zarichney-api",
          "analysis_type": "comprehensive_security_analysis",
          "build_context": {
            "branch": "${{ github.ref_name }}",
            "commit_sha": "${{ github.sha }}",
            "event_type": "${{ github.event_name }}",
            "run_id": "${{ github.run_id }}",
            "actor": "${{ github.actor }}",
            "timestamp": "$(date -Iseconds)"
          },
          "codeql_analysis": {
            "completed": $CODEQL_COMPLETED,
            "languages_analyzed": ["csharp", "javascript"],
            "security_queries_enabled": true
          },
          "dependency_security": {
            "dotnet_vulnerabilities_found": $DOTNET_VULNERABILITIES,
            "npm_total_vulnerabilities": $NPM_TOTAL_VULNERABILITIES,
            "npm_critical_vulnerabilities": $NPM_CRITICAL,
            "npm_high_vulnerabilities": $NPM_HIGH,
            "total_dependency_vulnerabilities": $DEPENDENCY_VULNERABILITIES
          },
          "policy_compliance": {
            "total_violations": $POLICY_VIOLATIONS,
            "areas_checked": ["security_policies", "workflow_permissions", "secret_detection", "dependency_config", "https_enforcement"]
          },
          "secrets_detection": {
            "secrets_detected": $SECRETS_DETECTED,
            "secret_count": $SECRET_COUNT,
            "tool_used": "TruffleHog OSS"
          },
          "security_assessment": {
            "overall_risk_level": "$RISK_LEVEL",
            "deployment_recommended": $DEPLOY_RECOMMENDED,
            "critical_issues": $([ "$SECRET_COUNT" -gt 0 ] || [ "$NPM_CRITICAL" -gt 0 ] && echo "true" || echo "false"),
            "requires_immediate_action": $([ "$RISK_LEVEL" = "CRITICAL" ] && echo "true" || echo "false")
          },
          "compliance_frameworks": {
            "owasp_top_10": "partial_coverage",
            "dependabot_enabled": true,
            "automated_scanning": true
          }
        }
        EOF
        
        echo "✅ Security data prepared for AI analysis"
        echo "  - CodeQL Analysis: $CODEQL_COMPLETED"
        echo "  - Dependency Vulnerabilities: $DEPENDENCY_VULNERABILITIES"
        echo "  - Policy Violations: $POLICY_VIOLATIONS"
        echo "  - Secrets Detected: $SECRET_COUNT"
        echo "  - Overall Risk Level: $RISK_LEVEL"

    - name: Claude AI Security Analysis (Max Subscription)
      if: always()
      uses: anthropics/claude-code-action@beta
      with:
        claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
        direct_prompt: |
          # Expert Security Analysis for zarichney-api Project
          
          You are a senior cybersecurity expert and application security engineer conducting a comprehensive security analysis of the zarichney-api project.
          
          ## Analysis Data
          Please analyze the security data in `./SecurityResults/security_analysis_data.json` which contains:
          - CodeQL static analysis results for C# and JavaScript
          - Dependency vulnerability scanning results (.NET and Node.js)
          - Security policy compliance assessment
          - Secrets detection results using TruffleHog
          - Overall security risk assessment and deployment readiness
          
          ## Required Analysis Sections
          
          ### 1. Executive Security Summary
          - Overall security posture assessment (Excellent/Good/Fair/Poor/Critical)
          - Key security achievements and immediate security concerns
          - Security risk level (Low/Medium/High/Critical) with detailed reasoning
          - Compliance status with industry security standards
          
          ### 2. Vulnerability Analysis
          - Critical and high-severity vulnerability assessment
          - Dependency security analysis (.NET and Node.js ecosystems)
          - Code-level security issues identified by CodeQL
          - Potential attack vectors and exploitation scenarios
          - Business impact assessment of identified vulnerabilities
          
          ### 3. Secrets and Sensitive Data Assessment
          - Analysis of secrets detection results
          - Evaluation of data protection practices
          - Assessment of configuration security
          - Recommendations for secrets management improvements
          
          ### 4. Security Policy Compliance Evaluation
          - Review of security policy adherence
          - Workflow permission security assessment
          - HTTPS enforcement and secure communication practices
          - Dependabot configuration and automated security updates
          
          ### 5. Threat Modeling & Risk Analysis
          - Identification of key threat vectors for the application
          - Analysis of attack surface and potential entry points
          - Risk prioritization based on likelihood and impact
          - Evaluation of existing security controls effectiveness
          
          ### 6. Actionable Security Recommendations
          **Priority ranked by security impact:**
          - **CRITICAL**: Immediate security actions required before deployment
          - **HIGH**: Security improvements needed within current sprint
          - **MEDIUM**: Security enhancements for next development cycle
          - **LOW**: Long-term security strategy improvements
          - Specific remediation steps with file paths and code examples where applicable
          
          ### 7. Security Decision Matrix & Deployment Assessment
          - Production deployment security evaluation
          - Security-related blocking issues that prevent deployment
          - Post-deployment security monitoring recommendations
          - Incident response and security rollback scenarios
          - **Final Security Decision: DEPLOY/BLOCK/CONDITIONAL_DEPLOY**
          
          ### 8. Compliance & Framework Assessment
          - OWASP Top 10 coverage analysis
          - Security framework compliance (if applicable)
          - Industry best practices adherence
          - Recommendations for security certification or audit preparation
          
          ## Output Requirements
          - Generate response in clear, actionable markdown format
          - Include specific file paths, vulnerability details, and concrete remediation steps
          - Provide technical details suitable for senior developers and security teams
          - Include confidence levels and risk scores for recommendations
          - Reference specific security metrics and findings from the analysis data
          - Use security industry terminology and frameworks appropriately
          
          ## Context Considerations
          - This is a full-stack web application (.NET backend, Angular frontend)
          - The analysis will be posted as a PR comment for development team review
          - Results will influence deployment decisions and security gates
          - Consider both development and production environment security implications
          
          Your analysis should provide expert-level security insights that enable informed decision-making about application security posture and deployment readiness.

    - name: Create Security Decision File
      if: always()
      run: |
        echo "💾 Creating security decision based on analysis..."
        
        # Extract security metrics for deployment decision
        DEPENDENCY_VULNERABILITIES=$(jq -r '.dependency_security.total_dependency_vulnerabilities // 0' ./SecurityResults/security_analysis_data.json)
        SECRET_COUNT=$(jq -r '.secrets_detection.secret_count // 0' ./SecurityResults/security_analysis_data.json)
        POLICY_VIOLATIONS=$(jq -r '.policy_compliance.total_violations // 0' ./SecurityResults/security_analysis_data.json)
        RISK_LEVEL=$(jq -r '.security_assessment.overall_risk_level // "UNKNOWN"' ./SecurityResults/security_analysis_data.json)
        CRITICAL_ISSUES=$(jq -r '.security_assessment.critical_issues // false' ./SecurityResults/security_analysis_data.json)
        
        # Create security deployment decision file
        cat > ./SecurityResults/security_deployment_decision.json << EOF
        {
          "deploy_recommended": $([ "$CRITICAL_ISSUES" = "false" ] && [ "$SECRET_COUNT" -eq 0 ] && echo "true" || echo "false"),
          "security_risk_level": "$RISK_LEVEL",
          "critical_security_issues": $CRITICAL_ISSUES,
          "secrets_detected": $([ "$SECRET_COUNT" -gt 0 ] && echo "true" || echo "false"),
          "dependency_vulnerabilities": $DEPENDENCY_VULNERABILITIES,
          "policy_violations": $POLICY_VIOLATIONS,
          "analysis_timestamp": "$(date -Iseconds)",
          "ai_security_analysis_completed": true,
          "security_gates_passed": $([ "$CRITICAL_ISSUES" = "false" ] && [ "$SECRET_COUNT" -eq 0 ] && echo "true" || echo "false"),
          "requires_security_review": $([ "$RISK_LEVEL" = "HIGH" ] || [ "$RISK_LEVEL" = "CRITICAL" ] && echo "true" || echo "false")
        }
        EOF
        
        echo "✅ Security decision file created"
        echo "  - Deploy Recommended: $([ "$CRITICAL_ISSUES" = "false" ] && [ "$SECRET_COUNT" -eq 0 ] && echo "true" || echo "false")"
        echo "  - Risk Level: $RISK_LEVEL"
        echo "  - Critical Issues: $CRITICAL_ISSUES"

    - name: Upload consolidated security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-security-analysis-${{ github.run_id }}
        path: |
          SecurityResults/security_analysis_data.json
          SecurityResults/security_deployment_decision.json
          AllSecurityResults/**/*
        retention-days: 30

    - name: Security Analysis Summary
      if: always()
      run: |
        echo "🔒 Comprehensive Security Analysis completed."
        echo "📊 Analysis results available in artifacts."
        if [ -f "./SecurityResults/security_deployment_decision.json" ]; then
          DEPLOY_RECOMMENDED=$(jq -r '.deploy_recommended' ./SecurityResults/security_deployment_decision.json)
          RISK_LEVEL=$(jq -r '.security_risk_level' ./SecurityResults/security_deployment_decision.json)
          echo "🚦 Deployment Recommendation: $DEPLOY_RECOMMENDED"
          echo "⚠️  Security Risk Level: $RISK_LEVEL"
        fi