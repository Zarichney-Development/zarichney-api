name: Unified CI/CD for Zarichney Fullstack

on:
  push:
    branches: [ main ]
    paths:
      - 'Code/Zarichney.Server/**'
      - 'Code/Zarichney.Server.Tests/**'
      - 'Code/Zarichney.Website/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Code/Zarichney.Server/**'
      - 'Code/Zarichney.Server.Tests/**'
      - 'Code/Zarichney.Website/**'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-2
  SECRET_ID: cookbook-factory-secrets
  SECRET_DB_PASSWORD_KEY: DbPassword

permissions:
  id-token: write
  contents: read

jobs:
  backend_build_and_test:
    name: Backend - Build and Test
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, 'force-backend') || !contains(github.event.pull_request.labels.*.name, 'skip-backend'))) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install tools
        run: |
          dotnet tool update --global dotnet-ef --version 8.*
          dotnet tool restore

      - name: Restore dependencies
        run: dotnet restore zarichney-api.sln

      - name: Build
        run: dotnet build zarichney-api.sln --configuration Release --no-restore

      - name: Generate API Client
        run: pwsh ./Scripts/generate-api-client.ps1

      - name: Run unit tests with coverage
        run: |
          dotnet test zarichney-api.sln --filter "Category=Unit" --configuration Release --no-build \
            --collect:"XPlat Code Coverage" --results-directory ./TestResults/unit \
            --logger "trx;LogFileName=unit_tests.trx"

      - name: Run integration tests
        run: |
          dotnet test zarichney-api.sln --filter "Category=Integration" --configuration Release --no-build \
            --collect:"XPlat Code Coverage" --results-directory ./TestResults/integration \
            --logger "trx;LogFileName=integration_tests.trx"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: ./TestResults/**/*.trx

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-results
          path: ./TestResults/**/coverage.cobertura.xml

  frontend_build_and_deploy:
    name: Frontend - Build and Deploy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: Code/Zarichney.Website/package-lock.json

      - name: Install Frontend Dependencies
        run: npm ci --legacy-peer-deps
        working-directory: ./Code/Zarichney.Website

      - name: Build Frontend for Production
        run: npm run build-prod
        working-directory: ./Code/Zarichney.Website

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy static assets to S3
        run: aws s3 sync dist/browser s3://static.zarichney.com --delete
        working-directory: ./Code/Zarichney.Website

      - name: Prepare server files for EC2
        run: |
          mkdir -p server-deploy/scripts
          cp -r dist/server/* server-deploy/
          cp package.json package-lock.json server-deploy/
          cp -r scripts/* server-deploy/scripts/
        working-directory: ./Code/Zarichney.Website

      - name: Deploy Frontend to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST_FRONTEND }}
          EC2_USERNAME: ec2-user
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > private_key && chmod 600 private_key
          scp -r -o StrictHostKeyChecking=no -i private_key ./server-deploy/* ${EC2_USERNAME}@${EC2_HOST}:~/app/
          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USERNAME}@${EC2_HOST} '
            cd ~/app
            npm ci --omit=dev --legacy-peer-deps
            pm2 restart server || pm2 start "npm run serve:ssr" --name server
          '
        working-directory: ./Code/Zarichney.Website

      - name: Invalidate CloudFront for Frontend
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  backend_deploy:
    name: Backend - Deploy
    needs: backend_build_and_test
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
      
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install EF Core Tools
        run: dotnet tool update --global dotnet-ef --version 8.*

      - name: Generate EF Migrations Script
        run: |
          mkdir -p ./publish/migrations
          dotnet ef migrations script --context UserDbContext --project Code/Zarichney.Server/Zarichney.Server.csproj -o ./publish/migrations/ApplyAllMigrations.sql --idempotent

      - name: Publish Application
        run: dotnet publish Code/Zarichney.Server/Zarichney.Server.csproj -c Release -o ./publish

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Backend to EC2 and Apply Migrations
        env:
          EC2_HOST: ${{ secrets.EC2_HOST_BACKEND }}
          EC2_USERNAME: ec2-user
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$EC2_SSH_KEY" > private_key && chmod 600 private_key
          scp -r -o StrictHostKeyChecking=no -i private_key ./publish/* ${EC2_USERNAME}@${EC2_HOST}:/opt/cookbook-api/

          ssh -o StrictHostKeyChecking=no -i private_key ${EC2_USERNAME}@${EC2_HOST} 'bash -s' <<'EOF'
            set -e # Exit on error
            
            echo "Attempting to retrieve DB password from Secrets Manager..."
            DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id "${{ env.SECRET_ID }}" --region "${{ env.AWS_REGION }}" --query SecretString --output text | jq -r '.${{ env.SECRET_DB_PASSWORD_KEY }}')
            
            if [ -z "$DB_PASSWORD" ] || [ "$DB_PASSWORD" == "null" ]; then
              echo "ERROR: Failed to retrieve database password."
              exit 1
            fi
            export PGPASSWORD="$DB_PASSWORD"
            echo "Database password retrieved."
            
            cd /opt/cookbook-api/Server/Auth/Migrations
            chmod +x ./ApplyMigrations.sh
            echo "Running ApplyMigrations.sh..."
            ./ApplyMigrations.sh
            
            unset PGPASSWORD
            echo "Migrations applied. PGPASSWORD unset."
            
            echo "Restarting cookbook-api service..."
            sudo systemctl restart cookbook-api || sudo systemctl start cookbook-api
            echo "Service restart command issued."
          EOF

      - name: Invalidate CloudFront for Backend
        run: |
          aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/api/*"