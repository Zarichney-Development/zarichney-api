name: "02 ‚Ä¢ Quality Analysis"

on:
  workflow_run:
    workflows: ["01 ‚Ä¢ Build & Test"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr-number:
        description: 'Pull request number'
        required: false
        type: string

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  quality-analysis:
    name: "Quality Analysis"
    runs-on: ubuntu-latest
    if: always() && (github.event.workflow_run.event == 'pull_request' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup development environment
        uses: ./.github/actions/shared/setup-environment
        with:
          setup-dotnet: 'true'
          setup-node: 'false'
          dotnet-version: '8.0.x'

      - name: Get PR Number
        id: pr-number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pr-number }}" ]; then
            # Manual dispatch with PR number
            PR_NUMBER="${{ github.event.inputs.pr-number }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Direct PR trigger
            PR_NUMBER="${{ github.event.number }}"
          else
            # workflow_run trigger - extract PR number
            PR_NUMBER=$(gh run view ${{ github.event.workflow_run.id }} --json headBranch | jq -r '.headBranch' | grep -o 'pull/[0-9]*' | cut -d'/' -f2 || echo "")
            if [ -z "$PR_NUMBER" ]; then
              # Alternative: get PR number from API using commit SHA
              PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls --jq ".[] | select(.head.sha==\"${{ github.event.workflow_run.head_sha }}\") | .number")
            fi
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Found PR number: $PR_NUMBER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR check run
        id: create-check
        if: steps.pr-number.outputs.pr_number != ''
        run: |
          CHECK_RUN_ID=$(gh api repos/${{ github.repository }}/check-runs \
            --method POST \
            --field name="Quality Analysis" \
            --field head_sha="${{ github.event.workflow_run.head_sha || github.sha }}" \
            --field status="in_progress" \
            --field details_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --jq '.id')
          echo "check_run_id=$CHECK_RUN_ID" >> $GITHUB_OUTPUT
          echo "Created check run ID: $CHECK_RUN_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download test results
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-${{ github.event.workflow_run.run_number }}
          path: ./
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Run quality checks
        id: quality-checks
        shell: bash
        run: |
          echo "üîç Running comprehensive quality analysis..."
          
          # Set environment variables
          export PR_NUMBER="${{ steps.pr-number.outputs.pr_number }}"
          export BASE_BRANCH="${{ github.event.workflow_run.pull_requests[0].base.ref || 'develop' }}"
          export HEAD_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          export CLAUDE_CODE_OAUTH_TOKEN="${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Debug information
          echo "Debug: PR_NUMBER=$PR_NUMBER"
          echo "Debug: BASE_BRANCH=$BASE_BRANCH"
          echo "Debug: HEAD_SHA=$HEAD_SHA"
          echo "Debug: Current directory: $(pwd)"
          echo "Debug: Script exists: $(ls -la ./Scripts/Pipeline/run-quality-checks.sh)"
          
          # Make scripts executable and execute quality analysis
          chmod +x ./Scripts/Pipeline/run-quality-checks.sh
          chmod +x ./Scripts/Pipeline/*.sh
          
          # Execute with proper parameter handling
          if [ -n "$PR_NUMBER" ]; then
            ./Scripts/Pipeline/run-quality-checks.sh \
              --pr-number "$PR_NUMBER" \
              --base-branch "$BASE_BRANCH" \
              --head-sha "$HEAD_SHA" \
              --severity medium
          else
            ./Scripts/Pipeline/run-quality-checks.sh \
              --base-branch "$BASE_BRANCH" \
              --head-sha "$HEAD_SHA" \
              --severity medium
          fi

      - name: Standards Compliance AI Analysis
        if: steps.pr-number.outputs.pr_number != ''
        id: claude-standards
        uses: grll/claude-code-action@beta
        continue-on-error: true
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            # Standards Compliance Analysis for zarichney-api Project

            You are a senior software architect and code quality expert conducting a comprehensive standards compliance analysis for this pull request in the zarichney-api project.

            ## Analysis Data

            Please analyze the standards compliance data in `quality-analysis-data.json` which contains:
            - Code formatting compliance results
            - Git commit message standards validation
            - Testing standards adherence
            - Documentation standards compliance
            - Overall compliance score and violation categorization

            ## Required Analysis Sections

            ### 1. Executive Compliance Summary
            - Overall compliance status (Excellent/Good/Fair/Poor/Critical)
            - Key compliance achievements and immediate violations
            - Compliance score interpretation and trend analysis
            - Impact on code maintainability and team productivity

            ### 2. Mandatory Standards Violations
            - Critical formatting issues that block merging
            - Required test coverage violations
            - Essential documentation missing
            - Security-related compliance failures
            - Specific file paths and line numbers for each violation

            ### 3. Recommended Standards Analysis
            - Code style and formatting improvements
            - Git workflow and commit message enhancement opportunities
            - Documentation completeness assessment
            - Testing strategy alignment with project standards

            ### 4. Code Quality Assessment
            - Architecture pattern adherence
            - Naming convention compliance
            - Method and class size violations
            - Complexity metrics analysis
            - Design principle adherence (SOLID, DRY, KISS)

            ### 5. Documentation Standards Evaluation
            - XML documentation coverage for public APIs
            - README.md completeness and accuracy
            - Code comment quality and appropriateness
            - Architectural documentation alignment

            ### 6. Testing Standards Compliance
            - Test naming convention adherence
            - Test categorization (Unit/Integration) proper usage
            - Test coverage thresholds compliance
            - Test organization and structure validation

            ### 7. Actionable Remediation Plan

            **Priority ranked by compliance impact:**
            - **MANDATORY**: Critical violations that must be fixed before merging
            - **RECOMMENDED**: Important improvements for code quality
            - **OPTIONAL**: Nice-to-have enhancements for long-term maintainability

            Provide specific remediation steps with:
            - File paths and line numbers
            - Exact commands to run (e.g., `dotnet format`)
            - Code examples for complex fixes
            - Timeline estimates for each remediation

            ### 8. Compliance Decision Matrix
            Recommend one of:
            - **APPROVE**: All mandatory standards met, ready to merge
            - **CONDITIONAL**: Minor violations acceptable with monitoring
            - **REQUIRE_FIXES**: Mandatory violations must be resolved first

            ## Context Considerations
            - This is a full-stack .NET/Angular application
            - The analysis will be posted as a PR comment for development team review
            - Results will influence merge decisions and code quality gates
            - Standards are defined in project documentation under `/Docs/Standards/`

            Please analyze the code changes and provide your comprehensive standards compliance analysis.

      - name: Tech Debt AI Analysis  
        if: steps.pr-number.outputs.pr_number != ''
        id: claude-techdebt
        uses: grll/claude-code-action@beta
        continue-on-error: true
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            # Technical Debt Analysis for zarichney-api Project

            You are a senior software architect and technical debt specialist conducting a comprehensive technical debt analysis for this pull request in the zarichney-api project.

            ## Analysis Data

            Please analyze the technical debt data in `quality-analysis-data.json` which contains:
            - Code complexity metrics and violations
            - Maintenance burden indicators
            - Performance debt analysis
            - Architecture pattern adherence
            - Overall debt score and categorization

            ## Required Analysis Sections

            ### 1. Executive Debt Summary
            - Overall technical debt level (Excellent/Good/Fair/Poor/Critical)
            - Key debt accumulation areas and immediate concerns
            - Debt score interpretation and velocity impact
            - Long-term maintainability assessment

            ### 2. Code Complexity Analysis
            - Method length violations and cognitive complexity
            - Class size and responsibility violations
            - Cyclomatic complexity hotspots
            - Nesting depth and parameter count issues
            - SOLID principle violations

            ### 3. Performance Debt Assessment
            - Blocking async/await pattern violations
            - Inefficient algorithms and data structures
            - Resource leak potential (missing using statements)
            - Database query optimization opportunities
            - Memory allocation patterns

            ### 4. Maintenance Burden Evaluation
            - TODO/FIXME/HACK comment accumulation
            - Code duplication and repeated patterns
            - Hard-coded values and magic numbers
            - Configuration and environment dependencies
            - Error handling and logging gaps

            ### 5. Architecture Debt Analysis
            - Design pattern inconsistencies
            - Abstraction level violations
            - Dependency injection and coupling issues
            - Layer separation and boundary violations
            - API design and contract debt

            ### 6. Testing Debt Assessment
            - Test coverage gaps for complex code
            - Test maintainability and brittleness
            - Missing integration test scenarios
            - Test data management debt
            - Test performance and reliability issues

            ### 7. Prioritized Debt Remediation Plan

            **Priority ranked by business impact:**
            - **CRITICAL**: Debt that blocks feature development or causes production issues
            - **HIGH**: Debt that significantly slows development velocity
            - **MEDIUM**: Debt that impacts code maintainability
            - **LOW**: Debt that should be addressed during refactoring cycles

            For each debt item provide:
            - Business impact assessment
            - Effort estimation (S/M/L/XL)
            - Recommended remediation approach
            - Risk of not addressing the debt
            - Dependencies and prerequisites

            ### 8. Technical Debt Decision Matrix
            Recommend one of:
            - **ACCEPT**: Low-impact debt, continue development
            - **MONITOR**: Medium-impact debt, track and plan remediation
            - **REMEDIATE**: High-impact debt, address in current/next sprint
            - **BLOCK**: Critical debt, must be resolved before merge

            ## Context Considerations
            - This is a full-stack .NET/Angular application
            - The analysis will guide technical debt management decisions
            - Results will influence sprint planning and refactoring priorities
            - Consider both immediate and long-term maintainability

            Please analyze the code changes and provide your comprehensive technical debt analysis.




      - name: Quality metrics summary
        run: |
          SCORE="${{ steps.quality-checks.outputs.overall_score }}"
          VIOLATIONS="${{ steps.quality-checks.outputs.standards_violations }}"
          DEBT_ITEMS="${{ steps.quality-checks.outputs.tech_debt_items }}"
          
          echo "üìä Quality Analysis Summary"
          echo "Overall quality score: ${SCORE:-0}/100"
          echo "Standards violations: ${VIOLATIONS:-0}"
          echo "Tech debt items: ${DEBT_ITEMS:-0}"
          echo ""
          
          if [[ "${SCORE:-0}" -lt 70 ]]; then
            echo "‚ö†Ô∏è  Quality score below optimal threshold (70)"
            echo "ü§ñ Claude AI analysis posted with standards compliance insights"
            echo "ü§ñ Claude AI analysis posted with tech debt recommendations"
            echo "üéØ This is informational - see PR comments for actionable insights"
          else
            echo "‚úÖ Quality score meets threshold"
            echo "ü§ñ Claude AI analysis available with optimization recommendations"
          fi
          
          echo ""
          echo "üìù Real Claude AI analysis available in separate PR comments"

      - name: Create quality issues
        if: always() && steps.quality-checks.outputs.tech_debt_items > 10
        uses: ./.github/actions/create-tech-debt-issues
        continue-on-error: true
        with:
          pr-number: ${{ steps.pr-number.outputs.pr_number }}
          quality-data-file: artifacts/quality/quality-analysis-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete PR check run
        if: always() && steps.create-check.outputs.check_run_id != ''
        run: |
          # Quality analysis is informational - only fail on technical errors
          SCORE="${{ steps.quality-checks.outputs.overall_score }}"
          
          if [ "${{ job.status }}" = "success" ]; then
            if [[ "${SCORE:-0}" -lt 70 ]]; then
              CONCLUSION="neutral"
              TITLE="üìä Quality Analysis: Insights Available"
              SUMMARY="Quality score: ${SCORE:-0}/100. AI recommendations posted to PR comments."
            else
              CONCLUSION="success"
              TITLE="‚úÖ Quality Analysis: Excellent Quality"
              SUMMARY="Quality score: ${SCORE:-0}/100. Code meets quality standards."
            fi
          elif [ "${{ job.status }}" = "failure" ]; then
            CONCLUSION="failure"
            TITLE="‚ùå Quality Analysis: Technical Error"
            SUMMARY="Quality analysis failed due to technical issues - check workflow logs"
          else
            CONCLUSION="neutral"
            TITLE="üìä Quality Analysis: Completed"
            SUMMARY="Quality analysis completed. Results available in PR comments."
          fi
          
          gh api repos/${{ github.repository }}/check-runs/${{ steps.create-check.outputs.check_run_id }} \
            --method PATCH \
            --field status="completed" \
            --field conclusion="$CONCLUSION" \
            --field output[title]="$TITLE" \
            --field output[summary]="$SUMMARY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload quality artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-${{ github.run_number }}
          path: artifacts/quality/
          retention-days: 30

  quality-summary:
    name: "Quality Summary"
    runs-on: ubuntu-latest
    needs: quality-analysis
    if: always() && !cancelled()
    
    steps:
      - name: Generate quality summary
        run: |
          echo "üìä Quality Analysis Summary"
          echo "=========================="
          echo ""
          echo "**Analysis Results:**"
          echo "  - Quality analysis: ${{ needs.quality-analysis.result }}"
          echo ""
          
          if [ "${{ needs.quality-analysis.result }}" = "failure" ]; then
            echo "‚ùå Quality analysis failed due to technical issues"
            echo "üîß Check workflow logs for technical problems"
          elif [ "${{ needs.quality-analysis.result }}" = "success" ]; then
            echo "‚úÖ Quality analysis completed successfully"
            echo "ü§ñ Claude AI standards compliance analysis posted to PR"
            echo "ü§ñ Claude AI tech debt analysis posted to PR"
            echo "üìä Real AI-powered insights and recommendations available in PR comments"
          else
            echo "‚ö†Ô∏è Quality analysis was skipped or cancelled"
          fi
          
          echo ""
          echo "‚ÑπÔ∏è  Note: Quality analysis is informational and provides real Claude AI-powered"
          echo "   recommendations for code improvement. It does not block deployments."
          echo "ü§ñ Claude AI provides separate detailed analysis for standards compliance and tech debt."