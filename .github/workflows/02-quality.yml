name: "02 ‚Ä¢ Quality Analysis"

on:
  workflow_run:
    workflows: ["01 ‚Ä¢ Build & Test"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr-number:
        description: 'Pull request number'
        required: false
        type: string

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write
  issues: write

jobs:
  quality-analysis:
    name: "Quality Analysis"
    runs-on: ubuntu-latest
    if: always() && (github.event.workflow_run.event == 'pull_request' || github.event_name == 'workflow_dispatch')
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup development environment
        uses: ./.github/actions/shared/setup-environment
        with:
          setup-dotnet: 'true'
          setup-node: 'false'
          dotnet-version: '8.0.x'

      - name: Get PR Number
        id: pr-number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pr-number }}" ]; then
            # Manual dispatch with PR number
            PR_NUMBER="${{ github.event.inputs.pr-number }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # Direct PR trigger
            PR_NUMBER="${{ github.event.number }}"
          else
            # workflow_run trigger - extract PR number
            PR_NUMBER=$(gh run view ${{ github.event.workflow_run.id }} --json headBranch | jq -r '.headBranch' | grep -o 'pull/[0-9]*' | cut -d'/' -f2 || echo "")
            if [ -z "$PR_NUMBER" ]; then
              # Alternative: get PR number from API using commit SHA
              PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls --jq ".[] | select(.head.sha==\"${{ github.event.workflow_run.head_sha }}\") | .number")
            fi
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Found PR number: $PR_NUMBER"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR check run
        id: create-check
        if: steps.pr-number.outputs.pr_number != ''
        run: |
          CHECK_RUN_ID=$(gh api repos/${{ github.repository }}/check-runs \
            --method POST \
            --field name="Quality Analysis" \
            --field head_sha="${{ github.event.workflow_run.head_sha || github.sha }}" \
            --field status="in_progress" \
            --field details_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --jq '.id')
          echo "check_run_id=$CHECK_RUN_ID" >> $GITHUB_OUTPUT
          echo "Created check run ID: $CHECK_RUN_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download test results
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: test-results-${{ github.event.workflow_run.run_number }}
          path: ./
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Run quality checks
        id: quality-checks
        shell: bash
        run: |
          echo "üîç Running comprehensive quality analysis..."
          
          # Set environment variables
          export PR_NUMBER="${{ steps.pr-number.outputs.pr_number }}"
          export BASE_BRANCH="${{ github.event.workflow_run.pull_requests[0].base.ref || 'develop' }}"
          export HEAD_SHA="${{ github.event.workflow_run.head_sha || github.sha }}"
          export CLAUDE_CODE_OAUTH_TOKEN="${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}"
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Debug information
          echo "Debug: PR_NUMBER=$PR_NUMBER"
          echo "Debug: BASE_BRANCH=$BASE_BRANCH"
          echo "Debug: HEAD_SHA=$HEAD_SHA"
          echo "Debug: Current directory: $(pwd)"
          echo "Debug: Script exists: $(ls -la ./Scripts/Pipeline/run-quality-checks.sh)"
          
          # Make scripts executable and execute quality analysis
          chmod +x ./Scripts/Pipeline/run-quality-checks.sh
          chmod +x ./Scripts/Pipeline/*.sh
          
          # Execute with proper parameter handling
          if [ -n "$PR_NUMBER" ]; then
            ./Scripts/Pipeline/run-quality-checks.sh \
              --pr-number="$PR_NUMBER" \
              --base-branch="$BASE_BRANCH" \
              --head-sha="$HEAD_SHA" \
              --severity=medium
          else
            ./Scripts/Pipeline/run-quality-checks.sh \
              --base-branch="$BASE_BRANCH" \
              --head-sha="$HEAD_SHA" \
              --severity=medium
          fi

      - name: Post quality analysis results
        if: steps.pr-number.outputs.pr_number != ''
        uses: ./.github/actions/shared/post-results
        with:
          pr-number: ${{ steps.pr-number.outputs.pr_number }}
          report-file: quality-report.md
          report-type: quality
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check quality gates
        if: steps.quality-checks.outputs.overall_score < 70
        run: |
          echo "‚ùå Quality gates failed"
          echo "Overall quality score: ${{ steps.quality-checks.outputs.overall_score }}/100"
          echo "Standards violations: ${{ steps.quality-checks.outputs.standards_violations }}"
          echo "Tech debt items: ${{ steps.quality-checks.outputs.tech_debt_items }}"
          echo ""
          echo "Quality improvement required before merging"
          exit 1

      - name: Create quality issues
        if: always() && steps.quality-checks.outputs.tech_debt_items > 10
        uses: ./.github/actions/create-tech-debt-issues
        continue-on-error: true
        with:
          pr-number: ${{ steps.pr-number.outputs.pr_number }}
          quality-data-file: artifacts/quality/quality-analysis-data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Complete PR check run
        if: always() && steps.create-check.outputs.check_run_id != ''
        run: |
          # Determine conclusion based on job result
          if [ "${{ job.status }}" = "success" ]; then
            CONCLUSION="success"
            TITLE="‚úÖ Quality Analysis Passed"
            SUMMARY="All quality gates passed successfully"
          elif [ "${{ job.status }}" = "failure" ]; then
            CONCLUSION="failure"
            TITLE="‚ùå Quality Analysis Failed"
            SUMMARY="Quality gates failed - review required"
          else
            CONCLUSION="neutral"
            TITLE="‚ö†Ô∏è Quality Analysis Completed"
            SUMMARY="Quality analysis completed with warnings"
          fi
          
          gh api repos/${{ github.repository }}/check-runs/${{ steps.create-check.outputs.check_run_id }} \
            --method PATCH \
            --field status="completed" \
            --field conclusion="$CONCLUSION" \
            --field output[title]="$TITLE" \
            --field output[summary]="$SUMMARY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload quality artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-analysis-${{ github.run_number }}
          path: artifacts/quality/
          retention-days: 30

  quality-summary:
    name: "Quality Summary"
    runs-on: ubuntu-latest
    needs: quality-analysis
    if: always() && !cancelled()
    
    steps:
      - name: Generate quality summary
        run: |
          echo "üìä Quality Analysis Summary"
          echo "=========================="
          echo ""
          echo "**Analysis Results:**"
          echo "  - Quality analysis: ${{ needs.quality-analysis.result }}"
          echo ""
          
          if [ "${{ needs.quality-analysis.result }}" = "failure" ]; then
            echo "‚ùå Quality gates not met - review required"
          elif [ "${{ needs.quality-analysis.result }}" = "success" ]; then
            echo "‚úÖ All quality gates passed"
          else
            echo "‚ö†Ô∏è Quality analysis was skipped or cancelled"
          fi