#!/bin/bash
# Workflow scenario tests for coverage delta implementation

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Paths
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$(cd "${SCRIPT_DIR}/../.." && pwd)"
readonly WORKFLOW_FILE="$ROOT_DIR/.github/workflows/testing-coverage-build-review.yml"
readonly TEST_DATA_DIR="/tmp/workflow-scenario-test"

# Test results
declare -i TOTAL_TESTS=0
declare -i PASSED_TESTS=0

log_info() {
    echo -e "${BLUE}[WORKFLOW]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[WORKFLOW]${NC} $1"
}

log_error() {
    echo -e "${RED}[WORKFLOW]${NC} $1"
}

record_test() {
    local test_name="$1"
    local result="$2"

    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    if [[ "$result" == "PASS" ]]; then
        PASSED_TESTS=$((PASSED_TESTS + 1))
        log_success "✅ $test_name"
    else
        log_error "❌ $test_name"
    fi
}

setup_test_environment() {
    log_info "Setting up workflow scenario test environment"

    # Create test directory
    mkdir -p "$TEST_DATA_DIR"

    # Verify workflow file exists
    if [[ ! -f "$WORKFLOW_FILE" ]]; then
        log_error "Workflow file not found: $WORKFLOW_FILE"
        return 1
    fi

    # Check required tools
    if ! command -v jq >/dev/null 2>&1; then
        log_error "jq is required for workflow testing"
        return 1
    fi

    if ! command -v bc >/dev/null 2>&1; then
        log_error "bc is required for coverage calculations"
        return 1
    fi

    return 0
}

extract_coverage_comparison_logic() {
    # Extract the coverage comparison step from the workflow
    local logic_file="$TEST_DATA_DIR/coverage_comparison_logic.sh"

    cat > "$logic_file" << 'EOF'
#!/bin/bash
# Extracted coverage comparison logic from workflow

calculate_coverage_delta() {
    local current_coverage="$1"
    local baseline_coverage="$2"

    # Calculate coverage delta (mirroring workflow logic)
    if [[ -n "$current_coverage" && -n "$baseline_coverage" ]]; then
        COVERAGE_DELTA=$(echo "$current_coverage - $baseline_coverage" | bc -l 2>/dev/null || echo "0")
        COVERAGE_DELTA_ROUNDED=$(printf "%.2f" "$COVERAGE_DELTA" 2>/dev/null || echo "0.00")
    else
        COVERAGE_DELTA_ROUNDED="0.00"
    fi

    echo "$COVERAGE_DELTA_ROUNDED"
}

determine_coverage_trend() {
    local coverage_delta="$1"

    # Coverage improvement analysis (mirroring workflow logic)
    if (( $(echo "$coverage_delta > 0" | bc -l 2>/dev/null || echo "0") )); then
        echo "improved"
    elif (( $(echo "$coverage_delta < 0" | bc -l 2>/dev/null || echo "0") )); then
        echo "decreased"
    else
        echo "stable"
    fi
}

generate_coverage_delta_json() {
    local current_coverage="$1"
    local baseline_coverage="$2"
    local delta="$3"
    local trend="$4"
    local baseline_source="${5:-threshold}"
    local baseline_unavailable="${6:-true}"
    local output_file="$7"

    # Determine baseline source based on logic
    if [[ "$baseline_source" == "explicit_input" ]]; then
        BASELINE_UNAVAILABLE="false"
    else
        BASELINE_UNAVAILABLE="true"
    fi

    # Generate ISO 8601 timestamp
    TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

    # Create coverage delta JSON conforming to schema v1.0
    cat > "$output_file" << EOJSON
{
  "current_coverage": ${current_coverage:-0},
  "baseline_coverage": ${baseline_coverage:-0},
  "coverage_delta": ${delta:-0.00},
  "coverage_trend": "${trend:-stable}",
  "base_ref": "develop",
  "base_sha": "abc123456789",
  "run_number": 123,
  "timestamp": "${TIMESTAMP}",
  "baseline_source": "${baseline_source:-threshold}",
  "baseline_unavailable": ${BASELINE_UNAVAILABLE:-true},
  "notes": "Generated by testing-coverage-build-review workflow for AI framework integration (Issue #187)"
}
EOJSON
}
EOF

    chmod +x "$logic_file"
    echo "$logic_file"
}

test_coverage_improved_scenario() {
    log_info "Testing coverage improved scenario..."

    local logic_file
    logic_file=$(extract_coverage_comparison_logic)
    source "$logic_file"

    local current="18.5"
    local baseline="16.0"
    local expected_delta="2.50"
    local expected_trend="improved"

    # Test delta calculation
    local actual_delta
    actual_delta=$(calculate_coverage_delta "$current" "$baseline")

    if [[ "$actual_delta" == "$expected_delta" ]]; then
        record_test "Coverage delta calculation - improved scenario" "PASS"
    else
        log_error "Expected delta: $expected_delta, Actual: $actual_delta"
        record_test "Coverage delta calculation - improved scenario" "FAIL"
    fi

    # Test trend determination
    local actual_trend
    actual_trend=$(determine_coverage_trend "$actual_delta")

    if [[ "$actual_trend" == "$expected_trend" ]]; then
        record_test "Coverage trend determination - improved scenario" "PASS"
    else
        log_error "Expected trend: $expected_trend, Actual: $actual_trend"
        record_test "Coverage trend determination - improved scenario" "FAIL"
    fi

    # Test JSON generation
    local json_output="$TEST_DATA_DIR/improved_scenario.json"
    generate_coverage_delta_json "$current" "$baseline" "$actual_delta" "$actual_trend" "threshold" "true" "$json_output"

    if [[ -f "$json_output" ]] && jq empty "$json_output" 2>/dev/null; then
        # Verify JSON content
        local json_current json_baseline json_delta json_trend
        json_current=$(jq -r '.current_coverage' "$json_output")
        json_baseline=$(jq -r '.baseline_coverage' "$json_output")
        json_delta=$(jq -r '.coverage_delta' "$json_output")
        json_trend=$(jq -r '.coverage_trend' "$json_output")

        if [[ "$json_current" == "$current" && "$json_baseline" == "$baseline" && \
              "$json_delta" == "$actual_delta" && "$json_trend" == "$actual_trend" ]]; then
            record_test "JSON generation - improved scenario" "PASS"
        else
            record_test "JSON generation - improved scenario" "FAIL"
        fi
    else
        record_test "JSON generation - improved scenario" "FAIL"
    fi
}

test_coverage_decreased_scenario() {
    log_info "Testing coverage decreased scenario..."

    local logic_file
    logic_file=$(extract_coverage_comparison_logic)
    source "$logic_file"

    local current="14.5"
    local baseline="16.0"
    local expected_delta="-1.50"
    local expected_trend="decreased"

    # Test delta calculation
    local actual_delta
    actual_delta=$(calculate_coverage_delta "$current" "$baseline")

    if [[ "$actual_delta" == "$expected_delta" ]]; then
        record_test "Coverage delta calculation - decreased scenario" "PASS"
    else
        log_error "Expected delta: $expected_delta, Actual: $actual_delta"
        record_test "Coverage delta calculation - decreased scenario" "FAIL"
    fi

    # Test trend determination
    local actual_trend
    actual_trend=$(determine_coverage_trend "$actual_delta")

    if [[ "$actual_trend" == "$expected_trend" ]]; then
        record_test "Coverage trend determination - decreased scenario" "PASS"
    else
        log_error "Expected trend: $expected_trend, Actual: $actual_trend"
        record_test "Coverage trend determination - decreased scenario" "FAIL"
    fi

    # Test JSON generation with explicit input baseline
    local json_output="$TEST_DATA_DIR/decreased_scenario.json"
    generate_coverage_delta_json "$current" "$baseline" "$actual_delta" "$actual_trend" "explicit_input" "false" "$json_output"

    if [[ -f "$json_output" ]] && jq empty "$json_output" 2>/dev/null; then
        # Verify baseline_unavailable is false for explicit input
        local baseline_unavailable
        baseline_unavailable=$(jq -r '.baseline_unavailable' "$json_output")

        if [[ "$baseline_unavailable" == "false" ]]; then
            record_test "JSON generation - decreased scenario with explicit baseline" "PASS"
        else
            record_test "JSON generation - decreased scenario with explicit baseline" "FAIL"
        fi
    else
        record_test "JSON generation - decreased scenario with explicit baseline" "FAIL"
    fi
}

test_coverage_stable_scenario() {
    log_info "Testing coverage stable scenario..."

    local logic_file
    logic_file=$(extract_coverage_comparison_logic)
    source "$logic_file"

    local current="16.0"
    local baseline="16.0"
    local expected_delta="0.00"
    local expected_trend="stable"

    # Test delta calculation
    local actual_delta
    actual_delta=$(calculate_coverage_delta "$current" "$baseline")

    if [[ "$actual_delta" == "$expected_delta" ]]; then
        record_test "Coverage delta calculation - stable scenario" "PASS"
    else
        log_error "Expected delta: $expected_delta, Actual: $actual_delta"
        record_test "Coverage delta calculation - stable scenario" "FAIL"
    fi

    # Test trend determination
    local actual_trend
    actual_trend=$(determine_coverage_trend "$actual_delta")

    if [[ "$actual_trend" == "$expected_trend" ]]; then
        record_test "Coverage trend determination - stable scenario" "PASS"
    else
        log_error "Expected trend: $expected_trend, Actual: $actual_trend"
        record_test "Coverage trend determination - stable scenario" "FAIL"
    fi
}

test_baseline_source_scenarios() {
    log_info "Testing baseline source scenarios..."

    local logic_file
    logic_file=$(extract_coverage_comparison_logic)
    source "$logic_file"

    # Test threshold source
    local json_threshold="$TEST_DATA_DIR/baseline_threshold.json"
    generate_coverage_delta_json "16.5" "16.0" "0.50" "improved" "threshold" "true" "$json_threshold"

    if [[ -f "$json_threshold" ]]; then
        local source unavailable
        source=$(jq -r '.baseline_source' "$json_threshold")
        unavailable=$(jq -r '.baseline_unavailable' "$json_threshold")

        if [[ "$source" == "threshold" && "$unavailable" == "true" ]]; then
            record_test "Baseline source - threshold scenario" "PASS"
        else
            record_test "Baseline source - threshold scenario" "FAIL"
        fi
    else
        record_test "Baseline source - threshold scenario" "FAIL"
    fi

    # Test explicit input source
    local json_explicit="$TEST_DATA_DIR/baseline_explicit.json"
    generate_coverage_delta_json "17.0" "16.0" "1.00" "improved" "explicit_input" "false" "$json_explicit"

    if [[ -f "$json_explicit" ]]; then
        local source unavailable
        source=$(jq -r '.baseline_source' "$json_explicit")
        unavailable=$(jq -r '.baseline_unavailable' "$json_explicit")

        if [[ "$source" == "explicit_input" && "$unavailable" == "false" ]]; then
            record_test "Baseline source - explicit input scenario" "PASS"
        else
            record_test "Baseline source - explicit input scenario" "FAIL"
        fi
    else
        record_test "Baseline source - explicit input scenario" "FAIL"
    fi
}

test_workflow_integration_points() {
    log_info "Testing workflow integration points..."

    # Verify workflow contains coverage comparison step
    if grep -q "Perform coverage comparison analysis" "$WORKFLOW_FILE"; then
        record_test "Workflow contains coverage comparison step" "PASS"
    else
        record_test "Workflow contains coverage comparison step" "FAIL"
    fi

    # Verify workflow generates coverage_delta.json
    if grep -q "coverage_delta.json" "$WORKFLOW_FILE"; then
        record_test "Workflow generates coverage_delta.json" "PASS"
    else
        record_test "Workflow generates coverage_delta.json" "FAIL"
    fi

    # Verify workflow uploads coverage_delta.json as artifact
    if grep -A 10 "upload-artifact" "$WORKFLOW_FILE" | grep -q "coverage_delta.json"; then
        record_test "Workflow uploads coverage_delta.json artifact" "PASS"
    else
        record_test "Workflow uploads coverage_delta.json artifact" "FAIL"
    fi

    # Verify AI actions receive coverage_delta_file input
    if grep -q "coverage_delta_file" "$WORKFLOW_FILE"; then
        record_test "AI actions receive coverage_delta_file input" "PASS"
    else
        record_test "AI actions receive coverage_delta_file input" "FAIL"
    fi
}

cleanup_test_environment() {
    log_info "Cleaning up workflow scenario test environment"
    rm -rf "$TEST_DATA_DIR"
}

main() {
    log_info "🔄 Starting Coverage Delta Workflow Scenario Tests"

    if ! setup_test_environment; then
        log_error "Failed to set up test environment"
        return 1
    fi

    test_coverage_improved_scenario
    test_coverage_decreased_scenario
    test_coverage_stable_scenario
    test_baseline_source_scenarios
    test_workflow_integration_points

    cleanup_test_environment

    # Report results
    log_info "Workflow scenario tests completed: $PASSED_TESTS/$TOTAL_TESTS passed"

    if [[ $PASSED_TESTS -eq $TOTAL_TESTS ]]; then
        log_success "All workflow scenario tests passed"
        return 0
    else
        log_error "Some workflow scenario tests failed"
        return 1
    fi
}

# Run tests
main "$@"